{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const Banner = () => {\n//   const [visible, setVisible] = useState(false);\n//   const [description, setDescription] = useState('');\n//   const [timer, setTimer] = useState(0);\n//   const [link, setLink] = useState('');\n//   const [countdown, setCountdown] = useState(timer);\n\n//   useEffect(() => {\n//     // Fetch banner data from the backend\n//     axios.get('http://localhost:5000/api/banner')\n//       .then(response => {\n//         const { description, timer, link } = response.data;\n//         setDescription(description);\n//         setTimer(timer);\n//         setLink(link);\n//         setCountdown(timer);\n//         setVisible(true);\n//       })\n//       .catch(error => console.error('Error fetching banner data:', error));\n\n//     // Countdown logic\n//     if (visible) {\n//       const interval = setInterval(() => {\n//         setCountdown(prev => {\n//           if (prev <= 1) {\n//             setVisible(false);\n//             clearInterval(interval);\n//             return 0;\n//           }\n//           return prev - 1;\n//         });\n//       }, 1000);\n//       return () => clearInterval(interval);\n//     }\n//   }, [visible, timer]);\n\n//   if (!visible) return null;\n\n//   return (\n//     <div className=\"banner\">\n//       <p>{description}</p>\n//       <p>{countdown} seconds remaining</p>\n//       {link && <a href={link}>Learn more</a>}\n//     </div>\n//   );\n// };\n\n// export default Banner;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Container, Typography, Button, Card, CardContent, CircularProgress } from '@mui/material';\n\n// const Banner = () => {\n//     const [banner, setBanner] = useState(null);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n//     const [timeRemaining, setTimeRemaining] = useState(0);\n//     const [isVisible, setIsVisible] = useState(true);\n\n//     useEffect(() => {\n//         axios.get('http://localhost:5000/api/banner')\n//             .then(response => {\n//                 setBanner(response.data);\n//                 setLoading(false);\n//                 setTimeRemaining(response.data.timer); // Set initial countdown time\n//                 setIsVisible(response.data.visible); // Set initial visibility\n//             })\n//             .catch(error => {\n//                 setError('Error fetching banner data');\n//                 setLoading(false);\n//             });\n//     }, []);\n\n//     useEffect(() => {\n//         if (timeRemaining > 0) {\n//             const interval = setInterval(() => {\n//                 setTimeRemaining(prevTime => {\n//                     if (prevTime <= 1) {\n//                         clearInterval(interval);\n//                         setIsVisible(false); // Hide banner when timer reaches 0\n//                         return 0;\n//                     }\n//                     return prevTime - 1;\n//                 });\n//             }, 1000);\n\n//             return () => clearInterval(interval); // Cleanup interval on component unmount\n//         }\n//     }, [timeRemaining]);\n\n//     if (loading) {\n//         return (\n//             <Container maxWidth=\"sm\" style={{ textAlign: 'center', marginTop: '50px' }}>\n//                 <CircularProgress />\n//                 <Typography variant=\"h6\" style={{ marginTop: '20px' }}>Loading...</Typography>\n//             </Container>\n//         );\n//     }\n\n//     if (error) {\n//         return (\n//             <Container maxWidth=\"sm\" style={{ textAlign: 'center', marginTop: '50px' }}>\n//                 <Typography variant=\"h6\" color=\"error\">{error}</Typography>\n//             </Container>\n//         );\n//     }\n\n//     if (!isVisible) {\n//         return null; // Don't render anything if the banner is hidden\n//     }\n\n//     return (\n//         <Container maxWidth=\"md\" style={{ marginTop: '50px' }}>\n//             <Card variant=\"outlined\">\n//                 <CardContent style={{ textAlign: 'center' }}>\n//                     <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n//                         {banner.description}\n//                     </Typography>\n//                     <Button\n//                         variant=\"contained\"\n//                         color=\"primary\"\n//                         href={banner.link}\n//                         target=\"_blank\"\n//                         rel=\"noopener noreferrer\"\n//                         style={{ marginTop: '20px' }}\n//                     >\n//                         Visit Banner Link\n//                     </Button>\n//                     <Typography variant=\"body1\" style={{ marginTop: '20px' }}>\n//                         {isVisible ? 'Banner is visible' : 'Banner is hidden'}\n//                     </Typography>\n//                     <Typography variant=\"body2\" color=\"textSecondary\" style={{ marginTop: '10px' }}>\n//                         Countdown Timer: {formatTime(timeRemaining)}\n//                     </Typography>\n//                 </CardContent>\n//             </Card>\n//         </Container>\n//     );\n// };\n\n// // Helper function to format time in MM:SS format\n// const formatTime = (seconds) => {\n//     const minutes = Math.floor(seconds / 60);\n//     const secs = seconds % 60;\n//     return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;\n// };\n\n// export default Banner;","map":{"version":3,"names":[],"sources":["C:/Users/Namandeep Singh/Documents/Project/Dynamix-banner-website/app-ui/src/Components/Banner.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const Banner = () => {\r\n//   const [visible, setVisible] = useState(false);\r\n//   const [description, setDescription] = useState('');\r\n//   const [timer, setTimer] = useState(0);\r\n//   const [link, setLink] = useState('');\r\n//   const [countdown, setCountdown] = useState(timer);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch banner data from the backend\r\n//     axios.get('http://localhost:5000/api/banner')\r\n//       .then(response => {\r\n//         const { description, timer, link } = response.data;\r\n//         setDescription(description);\r\n//         setTimer(timer);\r\n//         setLink(link);\r\n//         setCountdown(timer);\r\n//         setVisible(true);\r\n//       })\r\n//       .catch(error => console.error('Error fetching banner data:', error));\r\n\r\n//     // Countdown logic\r\n//     if (visible) {\r\n//       const interval = setInterval(() => {\r\n//         setCountdown(prev => {\r\n//           if (prev <= 1) {\r\n//             setVisible(false);\r\n//             clearInterval(interval);\r\n//             return 0;\r\n//           }\r\n//           return prev - 1;\r\n//         });\r\n//       }, 1000);\r\n//       return () => clearInterval(interval);\r\n//     }\r\n//   }, [visible, timer]);\r\n\r\n//   if (!visible) return null;\r\n\r\n//   return (\r\n//     <div className=\"banner\">\r\n//       <p>{description}</p>\r\n//       <p>{countdown} seconds remaining</p>\r\n//       {link && <a href={link}>Learn more</a>}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Banner;\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Container, Typography, Button, Card, CardContent, CircularProgress } from '@mui/material';\r\n\r\n// const Banner = () => {\r\n//     const [banner, setBanner] = useState(null);\r\n//     const [loading, setLoading] = useState(true);\r\n//     const [error, setError] = useState(null);\r\n//     const [timeRemaining, setTimeRemaining] = useState(0);\r\n//     const [isVisible, setIsVisible] = useState(true);\r\n\r\n//     useEffect(() => {\r\n//         axios.get('http://localhost:5000/api/banner')\r\n//             .then(response => {\r\n//                 setBanner(response.data);\r\n//                 setLoading(false);\r\n//                 setTimeRemaining(response.data.timer); // Set initial countdown time\r\n//                 setIsVisible(response.data.visible); // Set initial visibility\r\n//             })\r\n//             .catch(error => {\r\n//                 setError('Error fetching banner data');\r\n//                 setLoading(false);\r\n//             });\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         if (timeRemaining > 0) {\r\n//             const interval = setInterval(() => {\r\n//                 setTimeRemaining(prevTime => {\r\n//                     if (prevTime <= 1) {\r\n//                         clearInterval(interval);\r\n//                         setIsVisible(false); // Hide banner when timer reaches 0\r\n//                         return 0;\r\n//                     }\r\n//                     return prevTime - 1;\r\n//                 });\r\n//             }, 1000);\r\n\r\n//             return () => clearInterval(interval); // Cleanup interval on component unmount\r\n//         }\r\n//     }, [timeRemaining]);\r\n\r\n//     if (loading) {\r\n//         return (\r\n//             <Container maxWidth=\"sm\" style={{ textAlign: 'center', marginTop: '50px' }}>\r\n//                 <CircularProgress />\r\n//                 <Typography variant=\"h6\" style={{ marginTop: '20px' }}>Loading...</Typography>\r\n//             </Container>\r\n//         );\r\n//     }\r\n\r\n//     if (error) {\r\n//         return (\r\n//             <Container maxWidth=\"sm\" style={{ textAlign: 'center', marginTop: '50px' }}>\r\n//                 <Typography variant=\"h6\" color=\"error\">{error}</Typography>\r\n//             </Container>\r\n//         );\r\n//     }\r\n\r\n//     if (!isVisible) {\r\n//         return null; // Don't render anything if the banner is hidden\r\n//     }\r\n\r\n//     return (\r\n//         <Container maxWidth=\"md\" style={{ marginTop: '50px' }}>\r\n//             <Card variant=\"outlined\">\r\n//                 <CardContent style={{ textAlign: 'center' }}>\r\n//                     <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n//                         {banner.description}\r\n//                     </Typography>\r\n//                     <Button\r\n//                         variant=\"contained\"\r\n//                         color=\"primary\"\r\n//                         href={banner.link}\r\n//                         target=\"_blank\"\r\n//                         rel=\"noopener noreferrer\"\r\n//                         style={{ marginTop: '20px' }}\r\n//                     >\r\n//                         Visit Banner Link\r\n//                     </Button>\r\n//                     <Typography variant=\"body1\" style={{ marginTop: '20px' }}>\r\n//                         {isVisible ? 'Banner is visible' : 'Banner is hidden'}\r\n//                     </Typography>\r\n//                     <Typography variant=\"body2\" color=\"textSecondary\" style={{ marginTop: '10px' }}>\r\n//                         Countdown Timer: {formatTime(timeRemaining)}\r\n//                     </Typography>\r\n//                 </CardContent>\r\n//             </Card>\r\n//         </Container>\r\n//     );\r\n// };\r\n\r\n// // Helper function to format time in MM:SS format\r\n// const formatTime = (seconds) => {\r\n//     const minutes = Math.floor(seconds / 60);\r\n//     const secs = seconds % 60;\r\n//     return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;\r\n// };\r\n\r\n// export default Banner;\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}